"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const tar_1 = tslib_1.__importDefault(require("tar"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const ignore_1 = tslib_1.__importDefault(require("ignore"));
const path_1 = require("path");
const defaultIgnores = [
    '.git',
    '.idea',
    '.vscode',
    '.next',
    '.dockerignore',
    '*.*~',
    'liara.json',
    'node_modules',
    'bower_components',
];
const pythonPlatformsIgnores = [
    'venv',
    '/venv',
    '.venv',
    '.env',
    'ENV',
    '.python-version',
    '.cache',
    '__pycache__',
    'lib',
    'lib64',
    '*.py[cod]',
    '*$py.class',
    'pip-log.txt',
    'pip-delete-this-directory.txt',
    'celerybeat-schedule',
];
const platformIgnores = {
    django: [
        ...pythonPlatformsIgnores,
        '*.log',
        'local_settings.py',
        'staticfiles',
    ],
    flask: [...pythonPlatformsIgnores, 'instance', '.webassets-cache'],
    laravel: ['/vendor'],
    netcore: [
        // Source: https://gist.github.com/vmandic/ac2ecc9c24f6899ee0ec46e4ce444a0e
        'Debug',
        'debug',
        'Release',
        'release',
        'Releases',
        'releases',
        'x64',
        'x86',
        'build',
        'bld',
        'Bin',
        'bin',
        'Obj',
        'obj',
    ],
};
function trimLines(lines) {
    return lines.reduce((prev, line) => {
        if (!line.trim() || line.startsWith('#')) {
            return prev;
        }
        return [...prev, line];
    }, []);
}
const loadIgnoreFile = (ignoreInstance, ignoreFilePath, projectPath) => {
    const patterns = trimLines(fs_extra_1.default.readFileSync(ignoreFilePath).toString().split('\n'));
    const relativeToProjectPath = patterns.map((pattern) => {
        const dir = path_1.dirname(ignoreFilePath);
        if (pattern.startsWith('!')) {
            const absolutePrefix = pattern.slice(1).startsWith('/') ? '/' : '';
            return ('!' +
                absolutePrefix +
                path_1.relative(projectPath, path_1.join(dir, pattern.slice(1))));
        }
        const absolutePrefix = pattern.startsWith('/') ? '/' : '';
        return absolutePrefix + path_1.relative(projectPath, path_1.join(dir, pattern));
    });
    const linuxify = relativeToProjectPath.map((p) => p.replace(/\\/g, '/'));
    ignoreInstance.add(linuxify);
};
function addIgnorePatterns(ignoreInstance, projectPath, dir) {
    const liaraignorePath = path_1.join(projectPath, dir, '.liaraignore');
    const dockerignorePath = path_1.join(projectPath, dir, '.dockerignore');
    const gitignorePath = path_1.join(projectPath, dir, '.gitignore');
    if (fs_extra_1.default.existsSync(liaraignorePath)) {
        loadIgnoreFile(ignoreInstance, liaraignorePath, projectPath);
    }
    else if (fs_extra_1.default.existsSync(dockerignorePath)) {
        loadIgnoreFile(ignoreInstance, dockerignorePath, projectPath);
    }
    else if (fs_extra_1.default.existsSync(gitignorePath)) {
        loadIgnoreFile(ignoreInstance, gitignorePath, projectPath);
    }
}
async function createArchive(archivePath, projectPath, platform, debug = () => { }) {
    const ignoreInstance = ignore_1.default({ ignorecase: false });
    ignoreInstance.add(defaultIgnores);
    // @ts-ignore
    ignoreInstance.add(platformIgnores[platform] || []);
    const ignoreCache = {};
    const ignoreFN = (f) => {
        const dir = path_1.dirname(f);
        if (!ignoreCache[dir]) {
            addIgnorePatterns(ignoreInstance, projectPath, dir);
        }
        else {
            ignoreCache[dir] = true;
        }
        if (!ignoreInstance.ignores(f)) {
            return true;
        }
        debug(`ignoring ${f}`);
        return false;
    };
    const fileList = fs_extra_1.default.readdirSync(projectPath).filter(ignoreFN);
    return await tar_1.default.create({
        gzip: {
            level: 9,
        },
        cwd: projectPath,
        filter: ignoreFN,
        file: archivePath,
    }, fileList);
}
exports.default = createArchive;
