"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const globby_1 = tslib_1.__importDefault(require("globby"));
const fs_extra_1 = require("fs-extra");
function detectPlatform(projectPath) {
    var _a;
    const pipfilePath = path_1.default.join(projectPath, 'Pipfile');
    const indexPHPFilePath = path_1.default.join(projectPath, 'index.php');
    const packageJsonFilePath = path_1.default.join(projectPath, 'package.json');
    const composeJsonFilePath = path_1.default.join(projectPath, 'composer.json');
    const requirementsTxtFilePath = path_1.default.join(projectPath, 'requirements.txt');
    const [programCSFilePath] = globby_1.default.sync('**/{Startup.cs,Program.cs}', {
        cwd: projectPath,
        gitignore: true,
        deep: 5,
    });
    const hasPipfilePathFile = fs_extra_1.existsSync(pipfilePath);
    const hasIndexPHPFile = fs_extra_1.existsSync(indexPHPFilePath);
    const hasPackageFile = fs_extra_1.existsSync(packageJsonFilePath);
    const hasComposerJsonFile = fs_extra_1.existsSync(composeJsonFilePath);
    const hasRequirementsTxtFile = fs_extra_1.existsSync(requirementsTxtFilePath);
    const hasDockerFile = fs_extra_1.existsSync(path_1.default.join(projectPath, 'Dockerfile'));
    const hasWPContent = fs_extra_1.existsSync(path_1.default.join(projectPath, 'wp-content'));
    const hasCSProjFile = programCSFilePath &&
        globby_1.default.sync('*.csproj', {
            gitignore: true,
            cwd: path_1.default.join(projectPath, path_1.default.dirname(programCSFilePath)),
        }).length > 0;
    if (hasCSProjFile && hasDockerFile) {
        throw new Error(`The project contains both of the \`*.csproj\` and \`Dockerfile\` files.
Please specify your platform with --platform=netcore or docker.`);
    }
    if (hasCSProjFile) {
        return 'netcore';
    }
    if (hasComposerJsonFile && hasDockerFile) {
        throw new Error(`The project contains both of the \`composer.json\` and \`Dockerfile\` files.
Please specify your platform with --platform=laravel or docker.`);
    }
    if (hasComposerJsonFile) {
        const composerJson = fs_extra_1.readJSONSync(composeJsonFilePath);
        if (composerJson.require && composerJson.require['laravel/framework']) {
            return 'laravel';
        }
        if (composerJson.require &&
            composerJson.require['laravel/lumen-framework']) {
            return 'laravel';
        }
        return 'php';
    }
    if (hasIndexPHPFile) {
        return 'php';
    }
    if (hasRequirementsTxtFile) {
        const requirementsTxt = fs_extra_1.readFileSync(requirementsTxtFilePath);
        if (requirementsTxt.includes('Django') ||
            requirementsTxt.includes('django')) {
            return 'django';
        }
        if (requirementsTxt.includes('Flask') ||
            requirementsTxt.includes('flask')) {
            return 'flask';
        }
    }
    if (hasPipfilePathFile) {
        const pipfile = fs_extra_1.readFileSync(pipfilePath);
        if (pipfile.includes('Django') || pipfile.includes('django')) {
            return 'django';
        }
        if (pipfile.includes('Flask') || pipfile.includes('flask')) {
            return 'flask';
        }
    }
    if (hasPackageFile && hasDockerFile) {
        throw new Error(`The project contains both of the \`package.json\` and \`Dockerfile\` files.
Please specify your platform with --platform=node or docker.`);
    }
    if (hasPackageFile) {
        const packageJson = fs_extra_1.readJSONSync(packageJsonFilePath);
        if ((_a = packageJson === null || packageJson === void 0 ? void 0 : packageJson.dependencies) === null || _a === void 0 ? void 0 : _a.next) {
            return 'next';
        }
        if (packageJson.dependencies && packageJson.dependencies['@angular/core']) {
            return 'angular';
        }
        if (packageJson.devDependencies &&
            packageJson.devDependencies['@vue/cli-service']) {
            return 'vue';
        }
        if (packageJson.dependencies && packageJson.dependencies['react-scripts']) {
            return 'react';
        }
        return 'node';
    }
    if (hasWPContent && hasDockerFile) {
        throw new Error(`The project contains a \`Dockerfile\`.
Please specify your platform with --platform=wordpress or docker.`);
    }
    if (hasWPContent) {
        return 'wordpress';
    }
    if (hasDockerFile) {
        return 'docker';
    }
    return 'static';
}
exports.default = detectPlatform;
