"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ora_1 = tslib_1.__importDefault(require("ora"));
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const base_1 = tslib_1.__importDefault(require("../../base"));
const core_1 = require("@oclif/core");
const output_1 = require("../../utils/output");
class DiskCreate extends base_1.default {
    async run() {
        this.spinner = ora_1.default();
        const { flags } = await this.parse(DiskCreate);
        const debug = output_1.createDebugLogger(flags.debug);
        await this.setGotConfig(flags);
        const app = flags.app || (await this.promptProject());
        const name = flags.name || (await this.promptDiskName());
        const size = flags.size || (await this.promptDiskSize());
        try {
            await this.got.post(`v1/projects/${app}/disks`, { json: { name, size } });
            this.log(`Disk ${name} created.`);
        }
        catch (error) {
            debug(error.message);
            if (error.response && error.response.data) {
                debug(JSON.stringify(error.response.data));
            }
            if (error.response &&
                error.response.status === 400 &&
                error.response.data.message === 'not_enough_storage_space') {
                this.error(`Not enough storage space.`);
            }
            if (error.response &&
                error.response.status === 400 &&
                error.response.data.message.includes('["size" must be a number]')) {
                this.error('Invalid disk size.');
            }
            if (error.response && error.response.status === 400) {
                this.error(`Invalid disk name.`);
            }
            this.error(`Could not create the disk. Please try again.`);
        }
    }
    async promptProject() {
        this.spinner.start('Loading...');
        try {
            const { projects } = await this.got('v1/projects').json();
            this.spinner.stop();
            if (projects.length === 0) {
                this.warn("Please create an app via 'liara app:create' command, first.");
                this.exit(1);
            }
            const { project } = (await inquirer_1.default.prompt({
                name: 'project',
                type: 'list',
                message: 'Please select an app:',
                choices: [...projects.map((project) => project.project_id)],
            }));
            return project;
        }
        catch (error) {
            this.spinner.stop();
            throw error;
        }
    }
    async promptDiskName() {
        const { name } = (await inquirer_1.default.prompt({
            name: 'name',
            type: 'input',
            message: 'Enter a disk name:',
            validate: (input) => input.length > 2,
        }));
        return name;
    }
    async promptDiskSize() {
        const { size } = (await inquirer_1.default.prompt({
            name: 'size',
            type: 'input',
            message: 'Enter a disk size in GB:',
        }));
        return size;
    }
}
exports.default = DiskCreate;
DiskCreate.description = 'create a disk';
DiskCreate.flags = Object.assign(Object.assign({}, base_1.default.flags), { app: core_1.Flags.string({
        char: 'a',
        description: 'app id',
    }), name: core_1.Flags.string({
        char: 'n',
        description: 'disk name',
    }), size: core_1.Flags.string({
        char: 's',
        description: 'disk size',
    }) });
