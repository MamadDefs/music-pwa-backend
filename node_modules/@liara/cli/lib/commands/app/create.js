"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ora_1 = tslib_1.__importDefault(require("ora"));
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const base_1 = tslib_1.__importDefault(require("../../base"));
const core_1 = require("@oclif/core");
const constants_1 = require("../../constants");
const output_1 = require("../../utils/output");
const spacing_1 = tslib_1.__importDefault(require("../../utils/spacing"));
class AppCreate extends base_1.default {
    async run() {
        this.spinner = ora_1.default();
        const { flags } = await this.parse(AppCreate);
        const debug = output_1.createDebugLogger(flags.debug);
        await this.setGotConfig(flags);
        const name = flags.app || (await this.promptAppName());
        const account = await this.getCurrentAccount();
        await this.setGotConfig(flags);
        ((account && account.region === 'germany') || flags.region === 'germany') &&
            this.error('We do not support germany any more.');
        const platform = flags.platform || (await this.promptPlatform());
        if (!constants_1.AVAILABLE_PLATFORMS.includes(platform)) {
            this.error(`Unknown platform: ${platform}`);
        }
        const planID = flags.plan || (await this.promptPlan());
        try {
            await this.got.post('v1/projects/', { json: { name, planID, platform } });
            this.log(`App ${name} created.`);
        }
        catch (error) {
            debug(error.message);
            if (error.response && error.response.body) {
                debug(JSON.stringify(error.response.body));
            }
            if (error.response && error.response.statusCode === 404) {
                this.error(`Could not create the app.`);
            }
            if (error.response && error.response.statusCode === 409) {
                this.error(`The app already exists. Please use a unique name for your app.`);
            }
            if (error.response &&
                error.response.statusCode === 403 &&
                error.response.body) {
                const body = JSON.parse(error.response.body);
                if (body.data.code === 'free_plan_platform') {
                    this.error(`The free plan is not available for ${platform} platform.`);
                }
                if (body.data.code === 'free_plan_count') {
                    this.error(`You are allowed to create only one app on the free plan`);
                }
            }
            this.error(`Could not create the app. Please try again.`);
        }
    }
    async promptPlan() {
        this.spinner.start('Loading...');
        try {
            const { plans } = await this.got('v1/me').json();
            this.spinner.stop();
            const { plan } = (await inquirer_1.default.prompt({
                name: 'plan',
                type: 'list',
                message: 'Please select a plan:',
                choices: [
                    ...Object.keys(plans.projects)
                        .filter((plan) => {
                        if (plans.projects[plan].available &&
                            plans.projects[plan].region === 'iran') {
                            return true;
                        }
                    })
                        .map((plan) => {
                        const availablePlan = plans.projects[plan];
                        const ram = availablePlan.RAM.amount;
                        const cpu = availablePlan.CPU.amount;
                        const disk = availablePlan.volume;
                        const price = availablePlan.price * 720;
                        const storageClass = availablePlan.storageClass;
                        return {
                            value: plan,
                            name: `RAM: ${ram}${spacing_1.default(5, ram)}GB,  CPU: ${cpu}${spacing_1.default(5, cpu)}Core,  Disk: ${disk}${spacing_1.default(3, disk) + 'GB'}${storageClass || 'SSD'},  Price: ${price.toLocaleString()}${price ? spacing_1.default(7, price) + 'Tomans/Month' : ''}`,
                        };
                    }),
                ],
            }));
            return plan;
        }
        catch (error) {
            this.spinner.stop();
            throw error;
        }
    }
    async promptPlatform() {
        this.spinner.start('Loading...');
        try {
            this.spinner.stop();
            const { platform } = (await inquirer_1.default.prompt({
                name: 'platform',
                type: 'list',
                message: 'Please select a platform:',
                choices: [...constants_1.AVAILABLE_PLATFORMS.map((platform) => platform)],
            }));
            return platform;
        }
        catch (error) {
            this.spinner.stop();
            throw error;
        }
    }
    async promptAppName() {
        const { name } = (await inquirer_1.default.prompt({
            name: 'name',
            type: 'input',
            message: 'Enter app name:',
            validate: (input) => input.length > 2,
        }));
        return name;
    }
}
exports.default = AppCreate;
AppCreate.description = 'create an app';
AppCreate.flags = Object.assign(Object.assign({}, base_1.default.flags), { app: core_1.Flags.string({
        char: 'a',
        description: 'app id',
    }), platform: core_1.Flags.string({
        description: 'platform',
    }), plan: core_1.Flags.string({
        description: 'plan',
    }) });
AppCreate.aliases = ['create'];
