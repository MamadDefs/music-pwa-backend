"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const moment_1 = tslib_1.__importDefault(require("moment"));
const ua_parser_js_1 = tslib_1.__importDefault(require("ua-parser-js"));
const core_1 = require("@oclif/core");
const base_1 = tslib_1.__importDefault(require("../../base"));
const output_1 = require("../../utils/output");
class AppLogs extends base_1.default {
    async run() {
        const { flags } = await this.parse(AppLogs);
        let since = flags.since || 1;
        this.debug = output_1.createDebugLogger(flags.debug);
        await this.setGotConfig(flags);
        const project = flags.app || (await this.promptProject());
        setInterval(async () => {
            this.debug('Polling...');
            let logs = [];
            try {
                const data = await this.got(`v1/projects/${project}/logs?since=${since}`).json();
                logs = data;
            }
            catch (error) {
                if (error.response && error.response.status === 404) {
                    // tslint:disable-next-line: no-console
                    console.error(new core_1.Errors.CLIError('App not found.').render());
                    process.exit(2);
                }
                this.debug(error.stack);
            }
            const lastLog = logs[logs.length - 1];
            if (lastLog && lastLog.datetime === 'Error') {
                // tslint:disable-next-line: no-console
                console.error(new core_1.Errors.CLIError(`${lastLog.message}
Sorry for inconvenience. Please contact us.`).render());
                process.exit(1);
            }
            if (lastLog) {
                since = moment_1.default(lastLog.datetime).unix() + 1;
            }
            for (const log of logs) {
                const datetime = chalk_1.default.gray(moment_1.default(log.datetime).format('YYYY-MM-DD HH:mm:ss'));
                this.log(`${datetime} | ${colorfulAccessLog(log.message)}`);
            }
        }, 1000);
    }
}
exports.default = AppLogs;
AppLogs.description = 'fetch the logs of an app';
AppLogs.flags = Object.assign(Object.assign({}, base_1.default.flags), { app: core_1.Flags.string({ char: 'a', description: 'app id' }), since: core_1.Flags.integer({
        char: 's',
        description: 'show logs since timestamp',
    }) });
AppLogs.aliases = ['logs'];
function colorfulAccessLog(message) {
    const COLOR_END = '\x1B[0m';
    const CYAN = '\x1B[0;36m';
    const GRAY = '\x1B[1;30m';
    const MAGENTO = '\x1B[1;35m';
    const GREEN = '\x1B[1;32m';
    const RED = '\x1B[1;31m';
    const YELLOW = '\x1B[1;33m';
    const BLUE = '\x1B[1;34m';
    return message
        .replace(/(((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4})/, `${CYAN}$1${COLOR_END}`)
        .replace(/(GET|POST|PUT|DELETE|OPTIONS|HEAD) (401|402|403|404|409)/, `$1 ${MAGENTO}$2${COLOR_END}`)
        .replace(/(GET|POST|PUT|DELETE|OPTIONS|HEAD) (301|302|304)/, `$1 ${GRAY}$2${COLOR_END}`)
        .replace(/(GET|POST|PUT|DELETE|OPTIONS|HEAD) (200|201|204)/, `$1 ${GREEN}$2${COLOR_END}`)
        .replace(/(GET|POST|PUT|DELETE|OPTIONS|HEAD) (500|502|503|504)/, `$1 ${RED}$2${COLOR_END}`)
        .replace('GET', `${BLUE}GET${COLOR_END}`)
        .replace('POST', `${GREEN}POST${COLOR_END}`)
        .replace('PUT', `${GREEN}PUT${COLOR_END}`)
        .replace('DELETE', `${RED}DELETE${COLOR_END}`)
        .replace('OPTIONS', `${YELLOW}OPTIONS${COLOR_END}`)
        .replace('HEAD', `${YELLOW}HEAD${COLOR_END}`)
        .replace(/(\[error\].+), client:/, `${RED}$1${COLOR_END}, client:`) // Nginx error log
        .replace(/("Mozilla.+")/, (match) => {
        var matchWithoutColors = match.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
        const { browser, os } = new ua_parser_js_1.default(matchWithoutColors).getResult();
        if (!browser.name || !os.name) {
            return `${GRAY}${matchWithoutColors}${COLOR_END}`;
        }
        return `${GRAY}"${browser.name} ${browser.version || ''} - ${os.name} ${os.version || ''}"${COLOR_END}`;
    });
}
