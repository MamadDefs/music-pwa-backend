"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const base_1 = tslib_1.__importDefault(require("../../base"));
const core_1 = require("@oclif/core");
const output_1 = require("../../utils/output");
class EnvUnset extends base_1.default {
    async run() {
        const { flags, argv } = await this.parse(EnvUnset);
        await this.setGotConfig(flags);
        const debug = output_1.createDebugLogger(flags.debug);
        if (!argv.length) {
            EnvUnset.run(['-h']);
            this.exit(0);
        }
        if (argv.join(' ').includes('=')) {
            return this.error(`You can't use '=' in the key. Please check your input.`);
        }
        const app = flags.app || (await this.promptProject());
        const appliedEnvs = await this.fetchEnvs(app);
        const variables = appliedEnvs.filter((v) => !argv.includes(v.key));
        try {
            if (flags.force || (await this.confirm())) {
                await this.got.post(`v1/projects/update-envs`, {
                    json: { project: app, variables },
                });
                this.log(`Configuration variable removed and restarting ${app}`);
            }
        }
        catch (error) {
            debug(error.message);
        }
    }
    async fetchEnvs(app) {
        const { project } = await this.got(`v1/projects/${app}`).json();
        const envs = project.envs.map((env) => {
            const key = env.key;
            const value = env.value;
            return { key, value };
        });
        return envs;
    }
    async confirm() {
        const { confirm } = (await inquirer_1.default.prompt({
            name: 'confirm',
            type: 'confirm',
            message: `Your app will be restarted due to these configuration changes. Confirm: `,
            default: false,
        }));
        return confirm;
    }
}
exports.default = EnvUnset;
EnvUnset.description = 'remove environment variables from an app';
EnvUnset.strict = false;
EnvUnset.args = [
    {
        name: 'env',
        description: 'key',
    },
];
EnvUnset.flags = Object.assign(Object.assign({}, base_1.default.flags), { app: core_1.Flags.string({ char: 'a', description: 'app id' }), force: core_1.Flags.boolean({ char: 'f', description: 'force update' }) });
