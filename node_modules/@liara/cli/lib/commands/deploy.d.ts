import ora from 'ora';
import Command from '../base';
import IFlags from '../types/flags';
import ILiaraJSON from '../types/liara-json';
import ICreatedRelease from '../types/created-release';
import IDeploymentConfig from '../types/deployment-config';
export default class Deploy extends Command {
    static description: string;
    static flags: {
        path: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        platform: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        app: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        port: import("@oclif/core/lib/interfaces").OptionFlag<number | undefined>;
        image: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        detach: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        args: import("@oclif/core/lib/interfaces").OptionFlag<string[] | undefined>;
        'build-arg': import("@oclif/core/lib/interfaces").OptionFlag<string[] | undefined>;
        message: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        disks: import("@oclif/core/lib/interfaces").OptionFlag<string[] | undefined>;
        'no-cache': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        help: import("@oclif/core/lib/interfaces").BooleanFlag<void>;
        dev: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        debug: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        'api-token': import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        region: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
    };
    spinner: ora.Ora;
    run(): Promise<undefined>;
    deploy(config: IDeploymentConfig): Promise<ICreatedRelease>;
    createRelease(project: string, body: {
        [k: string]: any;
    }): import("got/dist/source").CancelableRequest<ICreatedRelease>;
    showBuildLogs(releaseID: string): Promise<void>;
    showReleaseLogs(releaseID: string): Promise<void>;
    parseFailReason(reason: string): string;
    dontDeployEmptyProjects(projectPath: string): void;
    logKeyValue(key: string, value?: string): void;
    validateDeploymentConfig(config: IDeploymentConfig): void;
    promptProject(): Promise<string>;
    promptPort(platform: string): Promise<number>;
    getMergedConfig(flags: IFlags): IDeploymentConfig;
    readProjectConfig(projectPath: string): ILiaraJSON;
    validatePlatform(platform: string, projectPath: string): void;
    upload(project: string, sourcePath: string, sourceSize: number): Promise<string>;
}
